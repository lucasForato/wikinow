package component

import (
	sitter "github.com/smacker/go-tree-sitter"
	"wikinow/internal/parser"
	"wikinow/internal/utils/ast"
)

templ CodeBlock(node *sitter.Node, lines *[]string, c *parser.Ctx) {
	<pre class="bg-[#2D2D2D] rounded p-4 my-4">
		for i := 0; i < int(node.NamedChildCount()); i++ {
			if node.NamedChild(i).Type() == "code_fence_content" {
				switch ast.GetLanguage(node, *lines) {
					case ast.JavaScript:
						<code class="language-javascript">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.TypeScript:
						<code class="language-typescript">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.Go:
						<code class="language-go">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.Python:
						<code class="language-python">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.C:
						<code class="language-c">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.Cpp:
						<code class="language-cpp">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.CSharp:
						<code class="language-csharp">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.Ruby:
						<code class="language-ruby">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.PHP:
						<code class="language-php">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.HTML:
						<code class="language-html">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.CSS:
						<code class="language-css">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					case ast.Rust:
						<code class="language-rust">
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
					default:
						<code>
							{ ast.GetCode(*lines, node.NamedChild(i)) }
						</code>
				}
			}
		}
		@Parser(node.NamedChild(0), lines, c)
	</pre>
}
