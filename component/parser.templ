package component

import (
	sitter "github.com/smacker/go-tree-sitter"
	"wikinow/utils"
	"html/template"
)

var goTemplate = template.Must(template.New("inline").Parse("<p>{{ . }}</p>"))

templ Parser(node *sitter.Node, lines *[]string, c *context.Context) {
	switch node.Type() {
		case "document":
			<div>
				for i := 0; i < int(node.ChildCount()); i++ {
					@Parser(node.Child(i), lines, c)
				}
			</div>
		case "section":
			for i := 0; i < int(node.ChildCount()); i++ {
				@Parser(node.Child(i), lines, c)
			}
		case "block_quote":
			<blockquote class="italic flex flex-row font-semibold text-amber-600">
				<span>❝</span>
				@Parser(node.Child(0), lines, c)
				<span>❝</span>
			</blockquote>
		case "block_quote_marker":
			@Parser(node.NextSibling(), lines, c)
		case "atx_heading":
			<div class="my-4">
				@Parser(node.Child(0), lines, c)
			</div>
		case "atx_h1_marker":
			<h1 class="text-xl font-bold">
				@Parser(node.NextSibling(), lines, c)
			</h1>
		case "setext_heading":
			<div class="my-4">
				@Parser(node.Child(int(node.ChildCount()-1)), lines, c)
			</div>
		case "setext_h1_underline":
			<h1 class="text-xl font-bold">
				@Parser(node.PrevSibling(), lines, c)
			</h1>
		case "atx_h2_marker":
			<h2>
				@Parser(node.NextSibling(), lines, c)
			</h2>
		case "setext_h2_underline":
			<h2>
				@Parser(node.PrevSibling(), lines, c)
			</h2>
		case "atx_h3_marker":
			<h3>
				@Parser(node.NextSibling(), lines, c)
			</h3>
		case "atx_h4_marker":
			<h4>
				@Parser(node.NextSibling(), lines, c)
			</h4>
		case "atx_h5_marker":
			<h5>
				@Parser(node.NextSibling(), lines, c)
			</h5>
		case "atx_h6_marker":
			<h6>
				@Parser(node.NextSibling(), lines, c)
			</h6>
		case "paragraph":
			for i := 0; i < int(node.ChildCount()); i++ {
				@Parser(node.Child(i), lines, c)
			}
		case "inline":
			@templ.FromGoHTML(goTemplate, utils.ParseInline(utils.GetText(*lines, node), c))
		default:
	}
}
